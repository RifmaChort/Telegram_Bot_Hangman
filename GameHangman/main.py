#7125253698:AAGN1SW98a34ZYdzVap8vtOB4QXZAee5Y9E
import logging
import random
import json
import atexit
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, ParseMode, InputMediaPhoto
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from pathlib import Path

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)


def load_themes(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    with open(filename, 'r', encoding='utf-8') as file:
        return json.load(file)


easy_themes = load_themes('easy_themes.json')
medium_themes = load_themes('medium_themes.json')
hard_themes = load_themes('hard_themes.json')

MAX_ATTEMPTS = 6

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
game_data = {}
current_message_id = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def start(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if chat_id in current_message_id:
        try:
            context.bot.delete_message(chat_id=chat_id, message_id=current_message_id[chat_id])
        except Exception:
            pass
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if chat_id in game_data:
            del game_data[chat_id]

    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å üèÅ", callback_data='start_game')],
        [InlineKeyboardButton("–ö–∞–∫ –∏–≥—Ä–∞—Ç—å üìú", callback_data='how_to_play')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü–∞" ü™¢!', reply_markup=reply_markup)

    current_message_id[chat_id] = message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è


def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_message_id[chat_id] = query.message.message_id
    query.answer()

    if query.data == 'start_game':
        if chat_id in game_data:
            query.edit_message_text(text="–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.")
            return
        choose_difficulty(query)
    elif query.data == 'how_to_play':
        show_instructions(query)
    elif query.data.startswith('difficulty_'):
        level = query.data.split('_')[1]
        game_data[chat_id] = {'difficulty': level, 'guessed_letters': set()}
        choose_theme(query, level)
    elif query.data.startswith('theme_'):
        start_game(update, context)
    elif query.data == 'play_again':
        game_data.pop(chat_id, None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
        start(update, context)


def choose_difficulty(query):
    keyboard = [
        [InlineKeyboardButton("–õ–µ–≥–∫–æ", callback_data='difficulty_easy')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–µ", callback_data='difficulty_medium')],
        [InlineKeyboardButton("–°–ª–æ–∂–Ω–æ", callback_data='difficulty_hard')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)


def choose_theme(query, level):
    themes = get_themes_by_difficulty(level)
    keyboard = [[InlineKeyboardButton(theme, callback_data=f'theme_{theme}')] for theme in themes.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)


def show_instructions(query):
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å üèÅ", callback_data='start_game')],
        [InlineKeyboardButton("–ö–∞–∫ –∏–≥—Ä–∞—Ç—å üìú", callback_data='how_to_play')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    instructions = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–≥—Ä–µ '–í–∏—Å–µ–ª–∏—Ü–∞' ü™¢:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É üìÇ.\n"
        "2. –ü—ã—Ç–∞–π—Ç–µ—Å—å —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –±—É–∫–≤—ã üî§.\n"
        "3. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±—É–∫–≤—ã üí°.\n"
        "4. –ï—Å–ª–∏ –≤—ã —É–≥–∞–¥–∞–µ—Ç–µ —Å–ª–æ–≤–æ, –≤—ã –ø–æ–±–µ–¥–∏—Ç–µ üéâ!\n"
        "5. –ï—Å–ª–∏ —Å–¥–µ–ª–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ üòî."
    )
    query.edit_message_text(text=instructions, reply_markup=reply_markup)


def start_game(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    theme = query.data.split('_')[1]
    chat_id = query.message.chat_id
    level = game_data[chat_id]['difficulty']
    themes = get_themes_by_difficulty(level)

    word_data = random.choice(themes[theme])
    word = word_data['word']
    hint = random.choice(word_data['hints'])
    fact = random.choice(word_data['facts'])

    max_hints = 1 if level in ['easy', 'medium'] else 2

    game_data[chat_id].update({
        'word': word,
        'hint': hint,
        'fact': fact,
        'attempts': 0,
        'incorrect_guesses': 0,
        'max_attempts': MAX_ATTEMPTS,
        'masked_word': '_' * len(word),
        'hint_used': 0,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        'max_hints': max_hints,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        'message_id': None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–π
    })

    send_initial_game_state(query, chat_id)


def get_themes_by_difficulty(level):
    if level == 'easy':
        return easy_themes
    elif level == 'medium':
        return medium_themes
    elif level == 'hard':
        return hard_themes


def send_initial_game_state(query, chat_id):
    game = game_data[chat_id]
    masked_word = ' '.join(game['masked_word'])
    hangman_stage = get_hangman_stage(game['incorrect_guesses'])
    keyboard = generate_keyboard(game)

    reply_markup = InlineKeyboardMarkup(keyboard)
    image_path = Path(f'images/image{game["incorrect_guesses"]}.jpg')

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = query.message.reply_photo(
        photo=open(image_path, 'rb'),
        caption=f"{hangman_stage}\n<b>–°–ª–æ–≤–æ:</b> {masked_word}\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {game['hint']}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {game['max_attempts'] - game['incorrect_guesses']}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    game['message_id'] = message.message_id


def show_game_state(query, chat_id):
    game = game_data[chat_id]
    masked_word = ' '.join(game['masked_word'])
    hangman_stage = get_hangman_stage(game['incorrect_guesses'])
    keyboard = generate_keyboard(game)

    reply_markup = InlineKeyboardMarkup(keyboard)

    image_path = Path(f'images/image{game["incorrect_guesses"]}.jpg')

    if game['message_id']:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        query.message.bot.edit_message_media(
            chat_id=chat_id,
            message_id=game['message_id'],
            media=InputMediaPhoto(open(image_path, 'rb')),
            reply_markup=reply_markup
        )
        query.message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=game['message_id'],
            caption=f"{hangman_stage}\n<b>–°–ª–æ–≤–æ:</b> {masked_word}\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {game['hint']}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {game['max_attempts'] - game['incorrect_guesses']}",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = query.message.reply_photo(
            photo=open(image_path, 'rb'),
            caption=f"{hangman_stage}\n<b>–°–ª–æ–≤–æ:</b> {masked_word}\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {game['hint']}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {game['max_attempts'] - game['incorrect_guesses']}",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        game['message_id'] = message.message_id


def get_hangman_stage(incorrect_guesses):
    return f"–≠—Ç–∞–ø {incorrect_guesses + 1}"


def handle_guess(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id
    game = game_data[chat_id]

    letter = query.data.split('_')[1]

    if letter in game['guessed_letters']:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–∂–µ —É–≥–∞–¥–∞–Ω–Ω—É—é –±—É–∫–≤—É

    game['guessed_letters'].add(letter)

    if letter in game['word']:
        masked_word_list = list(game['masked_word'])
        for i, l in enumerate(game['word']):
            if l == letter:
                masked_word_list[i] = letter
        game['masked_word'] = ''.join(masked_word_list)
    else:
        game['incorrect_guesses'] += 1

    if game['masked_word'] == game['word']:
        query.message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=game['message_id'],
            caption=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {game['word']} üéâ\n–§–∞–∫—Ç: {game['fact']}",
            parse_mode=ParseMode.HTML
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞"
        query.message.reply_text(
            text="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞?",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", callback_data='start_game')]])
        )
        game_data.pop(chat_id, None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    elif game['incorrect_guesses'] >= game['max_attempts']:
        query.message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=game['message_id'],
            caption=f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {game['word']} üòî\n–§–∞–∫—Ç: {game['fact']}",
            parse_mode=ParseMode.HTML
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞"
        query.message.reply_text(
            text="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞?",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", callback_data='start_game')]])
        )
        game_data.pop(chat_id, None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    else:
        show_game_state(query, chat_id)
        time.sleep(0.3)  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ 0.3 —Å–µ–∫—É–Ω–¥—ã


def use_hint(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id
    game = game_data[chat_id]

    if game['hint_used'] >= game['max_hints']:
        return

    available_indices = [i for i, l in enumerate(game['word']) if game['masked_word'][i] == '_']
    if available_indices:
        index = random.choice(available_indices)
        letter = game['word'][index]
        game['guessed_letters'].add(letter)
        masked_word_list = list(game['masked_word'])
        masked_word_list[index] = letter
        game['masked_word'] = ''.join(masked_word_list)

    game['hint_used'] += 1

    if game['masked_word'] == game['word']:
        query.message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=game['message_id'],
            caption=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {game['word']} üéâ\n–§–∞–∫—Ç: {game['fact']}",
            parse_mode=ParseMode.HTML
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞"
        query.message.reply_text(
            text="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞?",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", callback_data='start_game')]])
        )
        game_data.pop(chat_id, None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    else:
        show_game_state(query, chat_id)
        time.sleep(0.3)  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ 0.3 —Å–µ–∫—É–Ω–¥—ã


def generate_keyboard(game):
    keyboard = []
    alphabet = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
    row_length = 8
    for i in range(0, len(alphabet), row_length):
        row = [InlineKeyboardButton(letter, callback_data=f'guess_{letter}') if letter not in game[
            'guessed_letters'] else InlineKeyboardButton(' ', callback_data='disabled') for letter in
               alphabet[i:i + row_length]]
        keyboard.append(row)

    if game['incorrect_guesses'] < game['max_attempts'] and game['hint_used'] < game['max_hints']:
        keyboard.append([InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞ üí°", callback_data='use_hint')])

    return keyboard


def clear_chat(context: CallbackContext) -> None:
    for chat_id in current_message_id.keys():
        message_id = current_message_id[chat_id]
        for message_id in range(message_id, message_id - 40, -1):  # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 40 —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                continue


def cleanup(updater):
    logger.info("–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã.")
    clear_chat(updater.job_queue._dispatcher)


def main() -> None:
    updater = Updater("7125253698:AAGN1SW98a34ZYdzVap8vtOB4QXZAee5Y9E")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
    updater.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
    ])

    updater.dispatcher.add_handler(CommandHandler("start", start))
    updater.dispatcher.add_handler(CommandHandler("clear", lambda update, context: clear_chat(context)))
    updater.dispatcher.add_handler(CallbackQueryHandler(button, pattern='^start_game$'))
    updater.dispatcher.add_handler(CallbackQueryHandler(button, pattern='^how_to_play$'))
    updater.dispatcher.add_handler(CallbackQueryHandler(button, pattern='^difficulty_'))
    updater.dispatcher.add_handler(CallbackQueryHandler(button, pattern='^theme_'))
    updater.dispatcher.add_handler(CallbackQueryHandler(handle_guess, pattern='^guess_'))
    updater.dispatcher.add_handler(CallbackQueryHandler(use_hint, pattern='^use_hint$'))
    updater.dispatcher.add_handler(CallbackQueryHandler(button, pattern='^play_again$'))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
    atexit.register(cleanup, updater)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
